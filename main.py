import random
import re

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from database_commands import DataBase
import configparser


class Tokens:
    """
    –ö–ª–∞—Å—Å Token –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç Github'a
    """
    config = configparser.ConfigParser()
    config.read('settings.ini')
    token = config['Tokens']['bot_token']


state_storage = StateMemoryStorage()
token_bot = Tokens.token
bot = TeleBot(token_bot, state_storage=state_storage)
DB = DataBase()

known_users = {}


class UserInfo:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –º–æ–º–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    """
    def __init__(self, user_id):
        self.user_id = user_id
        self.buttons = []
        self.random_control = []
        self.eng_word = ''
        if self.user_id not in known_users:
            known_users[self.user_id] = self


print('Start telegram bot...')


def show_hint(*lines):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ lines, –≤—ã–≤–æ–¥–∏—Ç –∏—Ö —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏.
    """
    return '\n'.join(lines)


def show_target(data):
    """
    –ï—â—ë –æ–¥–Ω–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö,
    –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–≤–æ > –ø–µ—Ä–µ–≤–æ–¥.
    """
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    """
    –ö–ª–∞—Å—Å —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (—Ö—Ä–∞–Ω–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫)
    """
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    HELP = '/help'
    CARDS = '/cards'


class MyStates(StatesGroup):
    """
    –ö–ª–∞—Å—Å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    """
    target_word = State()
    translate_word = State()
    another_words = State()


@bot.message_handler(commands=['start'])
def greetings(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, —É—á–∏—Ç—ã–≤–∞–µ—Ç, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Ä–µ—à–∏–ª —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 2 –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—ã–±–æ—Ä
    –°–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help
    """
    cid = message.chat.id
    uid = message.from_user.id
    help_button = types.KeyboardButton(Command.HELP)
    cards_button = types.KeyboardButton(Command.CARDS)
    button_list = [help_button, cards_button]
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(*button_list)
    UserInfo(uid)
    if DB.check_user(uid) is False:
        DB.add_user(uid)
        DB.create_user_table(uid)
        bot.send_message(cid, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, user_{uid}, "
                              f"–¥–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...\n"
                              "–í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏!", reply_markup=markup)
    else:
        bot.send_message(cid, f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, user_{uid}, "
                              f"–¥–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π...\n"
                              "–í–≤–µ–¥–∏ /cards –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!",
                         reply_markup=markup)


@bot.message_handler(commands=['help'])
def help_command(message):
    """
    –°–ø—Ä–∞–≤–∫–∞
    """
    uid = message.from_user.id
    UserInfo(uid)
    hello = ('–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!\n'
             '–ö–æ–º–∞–Ω–¥–∞ /cards ‚Äî –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è, '
             '—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —É —Ç–µ–±—è —Å–≤–æ–π!\n'
             '–ü–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ø –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞,'
             ' –∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ!\n'
             '–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ" –∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"'
             ' –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.\n'
             '–ï—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ "–î–∞–ª—å—à–µ", –æ–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å '
             '—Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.\n'
             '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é! '
             '–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Å–ª–æ–≤.\n'
             '–£–¥–∞—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è!')
    bot.send_message(message.chat.id, hello)


@bot.message_handler(commands=['cards'])
def create_cards(message):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç
    —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–≤—Ç–æ—Ä–æ–≤
    """
    uid = message.from_user.id
    UserInfo(uid)
    markup = types.ReplyKeyboardMarkup(row_width=2)
    known_users[uid].buttons = []
    all_words = random.sample(DB.get_eng_words(uid), 4)
    target_word = all_words[0]
    translate = DB.get_translate(uid, target_word)
    while target_word in known_users[uid].random_control:
        all_words = random.sample(DB.get_eng_words(uid), 4)
        target_word = all_words[0]
        translate = DB.get_translate(uid, target_word)
    if target_word not in known_users[uid].random_control:
        known_users[uid].random_control.append(target_word)
    if len(known_users[uid].random_control) == len(DB.get_eng_words(uid)) - 1:
        known_users[uid].random_control = []
    target_word_btn = types.KeyboardButton(target_word)
    known_users[uid].buttons.append(target_word_btn)
    others = all_words[1:4]
    other_words_btns = [types.KeyboardButton(word) for word in others]
    known_users[uid].buttons.extend(other_words_btns)
    random.shuffle(known_users[uid].buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    known_users[uid].buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*known_users[uid].buttons)
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—è —Å–ª–æ–≤–æ
    """
    uid = message.from_user.id
    UserInfo(uid)
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_initiation(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ.
    """
    uid = message.from_user.id
    UserInfo(uid)
    msg = bot.reply_to(message, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, '
                                     '–∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '
                                     '(–≤–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–ª–æ–≤–æ '
                                     '–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)')
    bot.register_next_step_handler(msg, delete_word)


def delete_word(message):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π
    """
    uid = message.from_user.id
    word = message.text.lower()
    if DB.get_words_count(uid) == 4:
        bot.reply_to(message, '–°–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ...')
        return next_cards(message)
    if DB.delete_word(word, uid) == '–°–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ':
        bot.reply_to(message, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å... –í—ã —É–≤–µ—Ä–µ–Ω—ã, '
                              '—á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ?')
        create_cards(message)
    else:
        bot.reply_to(message, '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
        create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_initiate(message):
    """
    –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    –£—á–∏—Ç—ã–≤–∞—é—Ç, —á—Ç–æ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –≤–µ—Ä–Ω–æ–º —è–∑—ã–∫–µ
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è 2-–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    """
    uid = message.from_user.id
    UserInfo(uid)
    msg = bot.reply_to(message, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, '
                                     '–∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å '
                                     '(–≤–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–ª–æ–≤–æ '
                                     '–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)')
    bot.register_next_step_handler(msg, add_eng_word)


def add_eng_word(message):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è(–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞)
    """
    uid = message.from_user.id
    known_users[uid].eng_word = message.text.lower()
    pattern = r"[a-zA-Z]+"
    if re.fullmatch(pattern, known_users[uid].eng_word):
        if DB.check_word(known_users[uid].eng_word, uid) is True:
            bot.reply_to(message, text='–°–ª–æ–≤–æ —É–∂–µ –∏–∑—É—á–∞–µ—Ç—Å—è!')
            create_cards(message)
        else:
            msg = bot.reply_to(message, text='–û—Ç–ª–∏—á–Ω–æ! '
                                             '–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥!')
            bot.register_next_step_handler(msg, add_ru_word)
    else:
        bot.reply_to(message, text='–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!')


def add_ru_word(message):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞)
    """
    uid = message.from_user.id
    pattern = r"[–∞-—è—ë–ê-–Ø–Å]+"
    ru_word = message.text.lower()
    if re.fullmatch(pattern, ru_word):
        if (DB.add_word(known_users[uid].eng_word, ru_word, uid)
                == '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'):
            bot.reply_to(message, text='–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'
                                       f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤: '
                                       f'{DB.get_words_count(uid)}')
            next_cards(message)
        else:
            bot.reply_to(message, text='–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '
                                       '–≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–≤–æ–¥–∞!\n'
                                       '(–ø—Ä–æ—Å—Ç–∏—Ç–µ, –º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã '
                                       '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –±–∞–∑–æ–π '
                                       '–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ '
                                       '–±—ã–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥)')

            next_cards(message)
    else:
        bot.reply_to(message, text='–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!')


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –±–æ—Ç–æ–º —Ç–µ–∫—Å—Ç–∞
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã create_cards
    """
    uid = message.from_user.id
    UserInfo(uid)
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_word = data['target_word']
            if text == target_word:
                hint = show_target(data)
                hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
                hint = show_hint(*hint_text)
            else:
                for btn in UserInfo(uid).buttons:
                    if btn.text == text:
                        btn.text = text + '‚ùå'
                        break
                hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                                 f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å "
                                 f"—Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    except KeyError:
        hint = "–ú—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É! –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cards!"
    markup.add(*known_users[uid].buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
    try:
        if text == target_word:
            create_cards(message)
    except UnboundLocalError:
        pass


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
